@use "sass:color";

@use "maps/map-media" as mediaMap;
@use "maps/map-color" as colorMap;
@use "maps/map-gradient" as gradientMap;
@use "maps/map-radius" as radiusMap;
@use "maps/map-shadow" as shadowMap;
@use "maps/map-whitespace" as whitespaceMap;

$h2-map-alignment: (
  "center": "center",
  "justify": "justify",
  "right": "right",
  "left": "left"
);

$h2-map-display: (
  "block": "block",
  "inline": "inline",
  "inline-block": "inline-block",
  "flex": "flex",
  "inline-flex": "inline-flex",
  "grid": "grid",
  "inline-grid": "inline-grid",
  "flow-root": "flow-root",
  "none": "none",
  "contents": "contents",
  "table": "table",
  "table-row": "table-row",
  "list-item": "list-item"
);

$h2-map-sides: (
  // Note that tb and rl are for backwards compatibility purposes and are deprecated.
  "all": "",
  "top": "-top",
  "right": "-right",
  "bottom": "-bottom",
  "left": "-left",
  "top-bottom": "",
  "tb": "",
  "right-left": "",
  "rl" : ""
);

[data-hydrogen="VARVERSION"] {
  @each $mediaKey, $mediaValue in mediaMap.$h2-map-media {
    // Background Color
    // [MODIFIER]COLOR[OPACITY]
    @each $colorKey, $colorValue in colorMap.$h2-map-color {
      [data-h2-bg-color*="#{$mediaKey}(#{$colorKey})"] {
        background-color: $colorValue;
      }
    }
    @each $gradientKey, $gradientValue in gradientMap.$h2-map-gradient {
      [data-h2-bg-color*="#{$mediaKey}(#{$gradientKey})"] {
        background-image: #{$gradientValue};
      }
    }
    // Display
    // VALUE
    @each $displayKey, $displayValue in $h2-map-display {
      [data-h2-display*="#{$mediaKey}(#{$displayKey})"] {
        display: $displayValue;
      }
    }
    // Margins
    // SIDE, SIZE
    @each $sideKey, $sideValue in $h2-map-sides {
      @each $whitespaceKey, $whitespaceValue in whitespaceMap.$h2-map-whitespace {
        [data-h2-margin*="#{$mediaKey}(#{$sideKey}, #{$whitespaceKey})"] {
          @if $sideKey == "top-bottom" or $sideKey == "tb" {
            margin-top: #{$whitespaceValue};
            margin-bottom: #{$whitespaceValue};
          } @else if $sideKey == "right-left" or $sideKey == "rl" {
            margin-right: #{$whitespaceValue};
            margin-left: #{$whitespaceValue};
          } @else {
            margin#{$sideValue}: #{$whitespaceValue};
          }
        }
      }
      [data-h2-margin*="#{$mediaKey}(#{$sideKey}, auto)"] {
        @if $sideKey == "top-bottom" or $sideKey == "tb" {
          margin-top: auto;
          margin-bottom: auto;
        } @else if $sideKey == "right-left" or $sideKey == "rl" {
          margin-right: auto;
          margin-left: auto;
        } @else {
          margin#{$sideValue}: auto;
        }
      }
    }
    // Padding
    // SIDE, SIZE
    @each $sideKey, $sideValue in $h2-map-sides {
      @each $whitespaceKey, $whitespaceValue in whitespaceMap.$h2-map-whitespace {
        [data-h2-padding*="#{$mediaKey}(#{$sideKey}, #{$whitespaceKey})"] {
          @if $sideKey == "top-bottom" or $sideKey == "tb" {
            padding-top: #{$whitespaceValue};
            padding-bottom: #{$whitespaceValue};
          } @else if $sideKey == "right-left" or $sideKey == "rl" {
            padding-right: #{$whitespaceValue};
            padding-left: #{$whitespaceValue};
          } @else {
            padding#{$sideValue}: #{$whitespaceValue};
          }
        }
      }
    }
    // Radius
    // SIZE
    // SIZE, SIZE, SIZE, SIZE
    @each $radiusKey, $radiusValue in radiusMap.$h2-map-radius {
      [data-h2-radius*="#{$mediaKey}(#{$radiusKey})"] {
        border-radius: #{$radiusValue};
      }
    }
    @each $radiusKey1, $radiusValue1 in radiusMap.$h2-map-radius {
      @each $radiusKey2, $radiusValue2 in radiusMap.$h2-map-radius {
        @each $radiusKey3, $radiusValue3 in radiusMap.$h2-map-radius {
          @each $radiusKey4, $radiusValue4 in radiusMap.$h2-map-radius {
            [data-h2-radius*="#{$mediaKey}(#{$radiusKey1}, #{$radiusKey2}, #{$radiusKey3}, #{$radiusKey4})"] {
              border-radius: #{$radiusValue1} #{$radiusValue2} #{$radiusValue3} #{$radiusValue4};
            }
          }
        }
      }
    }
    // Shadows
    // SIZE
    @each $shadowKey, $shadowValue in shadowMap.$h2-map-shadow {
      [data-h2-shadow*="#{$mediaKey}(#{$shadowKey})"] {
        box-shadow: #{$shadowValue};
      }
    }
    // Text Alignment
    // ALIGNMENT
    @each $alignmentKey, $alignmentValue in $h2-map-alignment {
      [data-h2-text-align*="#{$mediaKey}(#{$alignmentKey})"] {
        text-align: $alignmentValue;
      }
    }
  }
}