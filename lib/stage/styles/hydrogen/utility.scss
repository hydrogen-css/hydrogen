@use "sass:color";

@use "maps/map-media" as mediaMap;
@use "maps/map-border-weight" as borderWeightMap;
@use "maps/map-color" as colorMap;
@use "maps/map-containers" as containerMap;
@use "maps/map-font-families" as fontFamilyMap;
@use "maps/map-gradient" as gradientMap;
@use "maps/map-radius" as radiusMap;
@use "maps/map-shadow" as shadowMap;
@use "maps/map-whitespace" as whitespaceMap;

@use "utilities/utility-flex-grid";

// Font Variables
$h2-font-scale: 1.33;
$h2-font-size-default: 1rem;
$h2-font-size-caption: calc(#{$h2-font-size-default}/#{$h2-font-scale});
$h2-font-size-h6: $h2-font-size-default;
$h2-font-size-h5: calc(#{$h2-font-size-default}*#{$h2-font-scale});
$h2-font-size-h4: calc(#{$h2-font-size-h5}*#{$h2-font-scale});
$h2-font-size-h3: calc(#{$h2-font-size-h4}*#{$h2-font-scale});
$h2-font-size-h2: calc(#{$h2-font-size-h3}*#{$h2-font-scale});
$h2-font-size-h1: calc(#{$h2-font-size-h2}*#{$h2-font-scale});

$h2-map-sides: (
  "all": "",
  "top": "-top",
  "right": "-right",
  "bottom": "-bottom",
  "left": "-left",
  "top-right": "",
  "top-bottom": "",
  "top-left": "",
  "bottom-right": "",
  "bottom-left": "",
  "right-left": ""
);

@each $mediaKey, $mediaValue in mediaMap.$h2-map-media {
  @media #{$mediaValue} {
    // Background Color
      // [MODIFIER]COLOR[OPACITY]
      // e.g. data-h2-bg-color="base(green)"
      // e.g. data-h2-bg-color="base(green[.9])"
      // e.g. data-h2-bg-color="base([light]green[.5])"
      @each $colorKey, $colorValue in colorMap.$h2-map-color {
        [data-h2-bg-color*="#{$mediaKey}(#{$colorKey})"] {
          background-color: $colorValue;
        }
      }
      // TYPE-DEGREE[STOP][STOP]
      // e.g. data-h2-bg-color="base(linear-45[green][blue])"
      // e.g. data-h2-bg-color="base(radial[blue][green])"
      @each $gradientKey, $gradientValue in gradientMap.$h2-map-gradient {
        [data-h2-bg-color*="#{$mediaKey}(#{$gradientKey})"] {
          background-image: #{$gradientValue};
        }
      }
    // Borders
    // COLOR, SIDE, STYLE, WEIGHT
    // e.g. data-h2-border="base(black, tb, solid, small)"
    $h2-map-border-style: (
      "solid": solid, 
      "dashed": dashed
    );
    @each $colorKey, $colorValue in colorMap.$h2-map-color {
      @each $sideKey, $sideValue in $h2-map-sides {
        @each $styleKey, $styleValue in $h2-map-border-style {
          @each $weightKey, $weightValue in borderWeightMap.$h2-map-border-weight {
            [data-h2-border*="#{$mediaKey}(#{$colorKey}, #{$sideKey}, #{$styleKey}, #{$weightKey})"] {
              @if $sideKey == "all" {
                border-color: $colorValue;
                border-style: $styleValue;
                border-width: $weightValue;
              } @else if $sideKey == "top-bottom" or $sideKey == "tb" {
                border-top-color: $colorValue;
                border-bottom-color: $colorValue;
                border-top-style: $styleValue;
                border-bottom-style: $styleValue;
                border-top-width: $weightValue;
                border-bottom-width: $weightValue;
              } @else if $sideKey == "right-left" or $sideKey == "rl" {
                border-right-color: $colorValue;
                border-left-color: $colorValue;
                border-right-style: $styleValue;
                border-left-style: $styleValue;
                border-right-width: $weightValue;
                border-left-width: $weightValue;
              } @else if $sideKey == "top-right" {
                border-right-color: $colorValue;
                border-top-color: $colorValue;
                border-right-style: $styleValue;
                border-top-style: $styleValue;
                border-right-width: $weightValue;
                border-top-width: $weightValue;
              } @else if $sideKey == "top-left" {
                border-top-color: $colorValue;
                border-left-color: $colorValue;
                border-top-style: $styleValue;
                border-left-style: $styleValue;
                border-top-width: $weightValue;
                border-left-width: $weightValue;
              } @else if $sideKey == "bottom-right" {
                border-right-color: $colorValue;
                border-bottom-color: $colorValue;
                border-right-style: $styleValue;
                border-bottom-style: $styleValue;
                border-right-width: $weightValue;
                border-bottom-width: $weightValue;
              } @else if $sideKey == "bottom-left" {
                border-bottom-color: $colorValue;
                border-left-color: $colorValue;
                border-bottom-style: $styleValue;
                border-left-style: $styleValue;
                border-bottom-width: $weightValue;
                border-left-width: $weightValue;
              } @else {
                border#{$sideValue}-color: $colorValue;
                border#{$sideValue}-style: $styleValue;
                border#{$sideValue}-width: $weightValue;
              }
            }
          }
        }
      }
    }
    // Containers
    // ALIGNMENT, SIZE
    // e.g. data-h2-container="base(center, medium)"
    $h2-map-container-alignment: (
      "left": auto auto auto 0,
      "center": 0 auto,
      "right": auto 0 auto auto
    );
    @each $containerKey, $containerValue in containerMap.$h2-map-containers {
      @each $alignmentKey, $alignmentValue in $h2-map-container-alignment {
        [data-h2-container*="#{$mediaKey}(#{$alignmentKey}, #{$containerKey})"] {
          margin: $alignmentValue;
          max-width: #{$containerValue};
        }
      }
    }
    // Display
    // VALUE
    // e.g. data-h2-display="base(block)"
    $h2-map-display: (
      "block": "block",
      "inline": "inline",
      "inline-block": "inline-block",
      "flex": "flex",
      "inline-flex": "inline-flex",
      "grid": "grid",
      "inline-grid": "inline-grid",
      "flow-root": "flow-root",
      "none": "none",
      "contents": "contents",
      "table": "table",
      "table-row": "table-row",
      "list-item": "list-item"
    );
    @each $displayKey, $displayValue in $h2-map-display {
      [data-h2-display*="#{$mediaKey}(#{$displayKey})"] {
        display: $displayValue;
      }
    }
    // Flex Properties
    $h2-map-align-content: (
      "center": center,
      "flex-end": flex-end,
      "flex-start": flex-start,
      "space-around": space-around,
      "space-between": space-between,
      "stretch": stretch
    );
    @each $alignKey, $alignValue in $h2-map-align-content {
      [data-h2-align-content*="#{$mediaKey}(#{$alignKey})"] {
        align-content: $alignValue;
      }
    }
    $h2-map-align-items: (
      "baseline": baseline,
      "center": center,
      "flex-end": flex-end,
      "flex-start": flex-start,
      "stretch": stretch
    );
    @each $alignKey, $alignValue in $h2-map-align-items {
      [data-h2-align-items*="#{$mediaKey}(#{$alignKey})"] {
        align-items: $alignValue;
      }
    }
    $h2-map-align-self: (
      "auto": auto,
      "baseline": baseline,
      "center": center,
      "inherit": inherit,
      "initial": initial,
      "flex-end": flex-end,
      "flex-start": flex-start,
      "stretch": stretch
    );
    @each $alignKey, $alignValue in $h2-map-align-self {
      [data-h2-align-self*="#{$mediaKey}(#{$alignKey})"] {
        align-self: $alignValue;
      }
    }
    $h2-map-flex-direction: (
      "column": column,
      "column-reverse": column-reverse,
      "row": row,
      "row-reverse": row-reverse
    );
    @each $directionKey, $directionValue in $h2-map-flex-direction {
      [data-h2-flex-direction*="#{$mediaKey}(#{$directionKey})"] {
        flex-direction: $directionValue;
      }
    }
    $h2-map-flex-wrap: (
      "nowrap": nowrap,
      "wrap": wrap,
      "wrap-reverse": wrap-reverse
    );
    @each $wrapKey, $wrapValue in $h2-map-flex-wrap {
      [data-h2-flex-wrap*="#{$mediaKey}(#{$wrapKey})"] {
        flex-wrap: $wrapValue;
      }
    }
    $h2-map-justify-content: (
      "center": center,
      "flex-end": flex-end,
      "flex-start": flex-start,
      "space-around": space-around,
      "space-between": space-between
    );
    @each $justifyKey, $justifyValue in $h2-map-justify-content {
      [data-h2-justify-content*="#{$mediaKey}(#{$justifyKey})"] {
        justify-content: $justifyValue;
      }
    }
    // Font Properties
      // Font Color
      // [MODIFIER]COLOR[OPACITY]
      // e.g. data-h2-font-color="base(green)"
      // e.g. data-h2-font-color="base(green[.9])"
      // e.g. data-h2-font-color="base([light]green[.5])"
      @each $colorKey, $colorValue in colorMap.$h2-map-color {
        [data-h2-font-color*="#{$mediaKey}(#{$colorKey})"] {
          color: $colorValue;
        }
        [data-h2-color*="#{$mediaKey}(#{$colorKey})"] {
          color: $colorValue;
        }
      }
      // Font Families
      // FAMILY
      // e.g. data-h2-font-family="base(sans)"
      @each $fontKey, $fontValue in fontFamilyMap.$h2-map-font-families {
        [data-h2-font-family*="#{$mediaKey}(#{$fontKey})"] {
          font-family: #{$fontValue};
        }
      }
      // Font Size
      // SIZE
      // e.g. data-h2-font-size="base(normal) medium(h3)"
      $h2-map-font-size: (
        "h1": $h2-font-size-h1,
        "h2": $h2-font-size-h2,
        "h3": $h2-font-size-h3,
        "h4": $h2-font-size-h4,
        "h5": $h2-font-size-h5,
        "h6": $h2-font-size-h6,
        "normal": $h2-font-size-default,
        "default": $h2-font-size-default,
        "copy": $h2-font-size-default,
        "caption": $h2-font-size-caption,
      );
      @each $sizeKey, $sizeValue in $h2-map-font-size {
        [data-h2-font-size*="#{$mediaKey}(#{$sizeKey})"] {
          font-size: $sizeValue;
        }
      }
      // Font Style
      // STYLE
      // e.g. data-h2-font-style="base(italic)"
      [data-h2-font-style*="#{$mediaKey}(reset)"] {
        font-style: normal;
        text-decoration: none currentcolor solid;
      }
      [data-h2-font-style*="#{$mediaKey}(italic)"] {
        font-style: italic;
        text-decoration: none currentcolor solid;
      }
      [data-h2-font-style*="#{$mediaKey}(underline)"] {
        font-style: normal;
        text-decoration: underline;
      }
      // Font Weight
      // WEIGHT
      // e.g. data-h2-font-weight="base(600)"
      $h2-map-font-weight: (
        "100": 100,
        "200": 200,
        "300": 300,
        "400": 400,
        "normal": 400,
        "500": 500,
        "600": 600,
        "700": 700,
        "bold": 700,
        "800": 800,
        "900": 900
      );
      @each $weightKey, $weightValue in $h2-map-font-weight {
        [data-h2-font-weight*="#{$mediaKey}(#{$weightKey})"] {
          font-weight: $weightValue;
        }
      }
    // Margins
    // SIDE, SIZE
    // e.g. data-h2-margin="base(top, small)"
    // e.g. data-h2-margin="base(rl, largest)"
    @each $sideKey, $sideValue in $h2-map-sides {
      @each $whitespaceKey, $whitespaceValue in whitespaceMap.$h2-map-whitespace {
        [data-h2-margin*="#{$mediaKey}(#{$sideKey}, #{$whitespaceKey})"] {
          @if $sideKey == "top-bottom" or $sideKey == "tb" {
            margin-top: #{$whitespaceValue};
            margin-bottom: #{$whitespaceValue};
          } @else if $sideKey == "right-left" or $sideKey == "rl" {
            margin-right: #{$whitespaceValue};
            margin-left: #{$whitespaceValue};
          } @else if $sideKey == "top-right" {
            margin-top: #{$whitespaceValue};
            margin-right: #{$whitespaceValue};
          } @else if $sideKey == "top-left" {
            margin-top: #{$whitespaceValue};
            margin-left: #{$whitespaceValue};
          } @else if $sideKey == "bottom-right" {
            margin-bottom: #{$whitespaceValue};
            margin-right: #{$whitespaceValue};
          } @else if $sideKey == "bottom-left" {
            margin-bottom: #{$whitespaceValue};
            margin-left: #{$whitespaceValue};
          } @else {
            margin#{$sideValue}: #{$whitespaceValue};
          }
        }
      }
      [data-h2-margin*="#{$mediaKey}(#{$sideKey}, auto)"] {
        @if $sideKey == "top-bottom" or $sideKey == "tb" {
          margin-top: auto;
          margin-bottom: auto;
        } @else if $sideKey == "right-left" or $sideKey == "rl" {
          margin-right: auto;
          margin-left: auto;
        } @else if $sideKey == "top-right" {
          margin-top: auto;
          margin-right: auto;
        } @else if $sideKey == "top-left" {
          margin-top: auto;
          margin-left: auto;
        } @else if $sideKey == "bottom-right" {
          margin-bottom: auto;
          margin-right: auto;
        } @else if $sideKey == "bottom-left" {
          margin-bottom: auto;
          margin-left: auto;
        } @else {
          margin#{$sideValue}: auto;
        }
      }
    }
    // Overflow
    // OVERFLOW
    // e.g. data-h2-overflow="base(hidden)"
    $h2-map-overflow: (
      "visible": visible,
      "hidden": hidden,
      "scroll": scroll,
      "auto": auto
    );
    @each $overflowKey, $overflowValue in $h2-map-overflow {
      [data-h2-overflow*="#{$mediaKey}(all, #{overflowKey})"] {
        overflow: $overflowValue;
      }
      [data-h2-overflow*="#{$mediaKey}(x, #{overflowKey})"] {
        overflow-x: $overflowValue;
      }
      [data-h2-overflow*="#{$mediaKey}(y, #{overflowKey})"] {
        overflow-y: $overflowValue;
      }
    }
    // Padding
    // SIDE, SIZE
    // e.g. data-h2-padding="base(tb, medium)"
    // e.g. data-h2-padding="base(right, smallest)"
    @each $sideKey, $sideValue in $h2-map-sides {
      @each $whitespaceKey, $whitespaceValue in whitespaceMap.$h2-map-whitespace {
        [data-h2-padding*="#{$mediaKey}(#{$sideKey}, #{$whitespaceKey})"] {
          @if $sideKey == "top-bottom" or $sideKey == "tb" {
            padding-top: #{$whitespaceValue};
            padding-bottom: #{$whitespaceValue};
          } @else if $sideKey == "right-left" or $sideKey == "rl" {
            padding-right: #{$whitespaceValue};
            padding-left: #{$whitespaceValue};
          } @else if $sideKey == "top-right" {
            padding-top: #{$whitespaceValue};
            padding-right: #{$whitespaceValue};
          } @else if $sideKey == "top-left" {
            padding-top: #{$whitespaceValue};
            padding-left: #{$whitespaceValue};
          } @else if $sideKey == "bottom-right" {
            padding-bottom: #{$whitespaceValue};
            padding-right: #{$whitespaceValue};
          } @else if $sideKey == "bottom-left" {
            padding-bottom: #{$whitespaceValue};
            padding-left: #{$whitespaceValue};
          } @else {
            padding#{$sideValue}: #{$whitespaceValue};
          }
        }
      }
    }
    // Position
    // POSITION
    // e.g. data-h2-position="base(relative)"
    $h2-map-position: (
      "static": static,
      "relative": relative,
      "fixed": fixed,
      "absolute": absolute,
      "sticky": sticky
    );
    @each $positionKey, $positionValue in $h2-map-position {
      // [data-h2-position*="#{$mediaKey}(#{$positionKey})"],
      // [data-h2-position*="#{$mediaKey}(#{$positionKey})"][data-h2-visibility] {
      [data-h2-position*="#{$mediaKey}(#{$positionKey})"] {
        position: #{$positionValue};
      }
    }
    // Position: Location
    // SIDE, SIZE
    // e.g. data-h2-location="base(top, medium)"
    // e.g. data-h2-location="base(rl, smallest)"
    @each $sideKey, $sideValue in $h2-map-sides {
      @each $whitespaceKey, $whitespaceValue in whitespaceMap.$h2-map-whitespace {
        // [data-h2-location*="#{$mediaKey}(#{$sideKey}, #{$whitespaceKey})"],
        // [data-h2-location*="#{$mediaKey}(#{$sideKey}, #{$whitespaceKey})"][data-h2-visibility] {
        [data-h2-location*="#{$mediaKey}(#{$sideKey}, #{$whitespaceKey})"] {
          @if $sideKey == "top-bottom" or $sideKey == "tb" {
            top: #{$whitespaceValue};
            bottom: #{$whitespaceValue};
          } @else if $sideKey == "right-left" or $sideKey == "rl" {
            right: #{$whitespaceValue};
            left: #{$whitespaceValue};
          } @else if $sideKey == "top-right" {
            top: #{$whitespaceValue};
            right: #{$whitespaceValue};
          } @else if $sideKey == "top-left" {
            top: #{$whitespaceValue};
            left: #{$whitespaceValue};
          } @else if $sideKey == "bottom-right" {
            bottom: #{$whitespaceValue};
            right: #{$whitespaceValue};
          } @else if $sideKey == "bottom-left" {
            bottom: #{$whitespaceValue};
            left: #{$whitespaceValue};
          } @else if $sideKey == "top" {
            top: #{$whitespaceValue};
          } @else if $sideKey == "right" {
            right: #{$whitespaceValue};
          } @else if $sideKey == "bottom" {
            bottom: #{$whitespaceValue};
          } @else if $sideKey == "left" {
            left: #{$whitespaceValue};
          } @else if $sideKey == "all" {
            top: #{$whitespaceValue};
            right: #{$whitespaceValue};
            bottom: #{$whitespaceValue};
            left: #{$whitespaceValue};
          }
        }
      }
    }
    // Radius
    // SIZE
    // e.g. data-h2-radius="base(small)"
    @each $radiusKey, $radiusValue in radiusMap.$h2-map-radius {
      [data-h2-radius*="#{$mediaKey}(#{$radiusKey})"] {
        border-radius: #{$radiusValue};
      }
    }
    // SIZE, SIZE, SIZE, SIZE
    // e.g. data-h2-radius="base(small, square, medium, small)"
    @each $radiusKey1, $radiusValue1 in radiusMap.$h2-map-radius {
      @each $radiusKey2, $radiusValue2 in radiusMap.$h2-map-radius {
        @each $radiusKey3, $radiusValue3 in radiusMap.$h2-map-radius {
          @each $radiusKey4, $radiusValue4 in radiusMap.$h2-map-radius {
            [data-h2-radius*="#{$mediaKey}(#{$radiusKey1}, #{$radiusKey2}, #{$radiusKey3}, #{$radiusKey4})"] {
              border-radius: #{$radiusValue1} #{$radiusValue2} #{$radiusValue3} #{$radiusValue4};
            }
          }
        }
      }
    }
    // Shadows
    // SIZE
    // e.g. data-h2-shadow="base(small)"
    @each $shadowKey, $shadowValue in shadowMap.$h2-map-shadow {
      [data-h2-shadow*="#{$mediaKey}(#{$shadowKey})"] {
        box-shadow: #{$shadowValue};
      }
    }
    // Text Alignment
    // ALIGNMENT
    // e.g. data-h2-text-align="base(center)"
    $h2-map-alignment: (
      "center": "center",
      "justify": "justify",
      "right": "right",
      "left": "left"
    );
    @each $alignmentKey, $alignmentValue in $h2-map-alignment {
      [data-h2-text-align*="#{$mediaKey}(#{$alignmentKey})"] {
        text-align: #{$alignmentValue};
      }
    }
    // Visibility
    // VALUE
    // e.g. data-h2-visibility="base(visible)"
    [data-h2-visibility*="#{$mediaKey}(invisible)"]{
      height: 1px;
      overflow: hidden;
      position: absolute;
      top: 0;
      left: -100vw;
      width: 1px;
    }
    [data-h2-visibility*="#{$mediaKey}(hidden)"] {
      display: none;
      visibility: hidden;
    }
    [data-h2-visibility*="#{$mediaKey}(visible)"] {
      display: block;
      height: auto;
      overflow: auto;
      position: static;
      top: auto;
      left: auto;
      width: auto;
      visibility: visible;
    }
  }
}